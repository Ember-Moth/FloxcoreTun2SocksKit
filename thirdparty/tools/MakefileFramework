
ARCHS ?= arm64
EFFECTIVE_PLATFORM_NAME ?=
PLATFORM_NAME ?= macosx
TARGET_DEVICE_PLATFORM_NAME ?=
SDKROOT ?= $(shell xcrun --sdk $(PLATFORM_NAME) --show-sdk-path)
CONFIGURATION_BUILD_DIR ?= $(CURDIR)/out
CONFIGURATION_TEMP_DIR ?= $(CURDIR)/.tmp
DESTDIR ?= $(CONFIGURATION_BUILD_DIR)
PACKAGEDIR ?= $(DESTDIR)/Tun2SocksKit
BUILDDIR ?= $(CONFIGURATION_TEMP_DIR)/build
LIPO ?= lipo

build: detect_platform

$(BUILDDIR)/libhev-socks5-tunnel-iphoneos-arm64.a: export SDKROOT := $(shell xcrun --sdk iphoneos --show-sdk-path)
$(BUILDDIR)/libhev-socks5-tunnel-iphoneos-arm64.a: export PP := xcrun --sdk iphoneos --toolchain iphoneos clang
$(BUILDDIR)/libhev-socks5-tunnel-iphoneos-arm64.a: export CC := xcrun --sdk iphoneos --toolchain iphoneos clang
$(BUILDDIR)/libhev-socks5-tunnel-iphoneos-arm64.a: export CFLAGS := -miphoneos-version-min=16.0 -isysroot $(SDKROOT) -arch arm64
$(BUILDDIR)/libhev-socks5-tunnel-iphoneos-arm64.a: export LFLAGS := -arch arm64 -Wl,-Bsymbolic-functions
$(BUILDDIR)/libhev-socks5-tunnel-iphoneos-arm64.a:
	make static -j 8
	mkdir -p $(BUILDDIR)
	libtool -static -o $@ \
		bin/libhev-socks5-tunnel.a \
		third-part/lwip/bin/liblwip.a \
		third-part/yaml/bin/libyaml.a \
		third-part/hev-task-system/bin/libhev-task-system.a
	make clean

$(BUILDDIR)/libhev-socks5-tunnel-appletvos-arm64.a: export SDKROOT := $(shell xcrun --sdk appletvos --show-sdk-path)
$(BUILDDIR)/libhev-socks5-tunnel-appletvos-arm64.a: export PP := xcrun --sdk iphoneos --toolchain appletvos clang
$(BUILDDIR)/libhev-socks5-tunnel-appletvos-arm64.a: export CC := xcrun --sdk iphoneos --toolchain appletvos clang
$(BUILDDIR)/libhev-socks5-tunnel-appletvos-arm64.a: export CFLAGS := -mappletvos-version-min=17.0 -isysroot $(SDKROOT) -arch arm64
$(BUILDDIR)/libhev-socks5-tunnel-appletvos-arm64.a: export LFLAGS := -arch arm64 -Wl,-Bsymbolic-functions
$(BUILDDIR)/libhev-socks5-tunnel-appletvos-arm64.a:
	make static -j 8
	mkdir -p $(BUILDDIR)
	libtool -static -o $@ \
		bin/libhev-socks5-tunnel.a \
		third-part/lwip/bin/liblwip.a \
		third-part/yaml/bin/libyaml.a \
		third-part/hev-task-system/bin/libhev-task-system.a
	make clean

$(BUILDDIR)/libhev-socks5-tunnel-iphonesimulator-arm64.a: export SDKROOT := $(shell xcrun --sdk iphonesimulator --show-sdk-path)
$(BUILDDIR)/libhev-socks5-tunnel-iphonesimulator-arm64.a: export PP := xcrun --sdk iphonesimulator --toolchain iphonesimulator clang
$(BUILDDIR)/libhev-socks5-tunnel-iphonesimulator-arm64.a: export CC := xcrun --sdk iphonesimulator --toolchain iphonesimulator clang
$(BUILDDIR)/libhev-socks5-tunnel-iphonesimulator-arm64.a: export CFLAGS := -target arm64-apple-ios16.0-simulator -isysroot $(SDKROOT) -arch arm64
$(BUILDDIR)/libhev-socks5-tunnel-iphonesimulator-arm64.a: export LFLAGS := -arch arm64 -Wl,-Bsymbolic-functions
$(BUILDDIR)/libhev-socks5-tunnel-iphonesimulator-arm64.a:
	make static -j 8
	mkdir -p $(BUILDDIR)
	libtool -static -o $@ \
		bin/libhev-socks5-tunnel.a \
		third-part/lwip/bin/liblwip.a \
		third-part/yaml/bin/libyaml.a \
		third-part/hev-task-system/bin/libhev-task-system.a
	make clean

$(BUILDDIR)/libhev-socks5-tunnel-iphonesimulator-x86_64.a: export SDKROOT := $(shell xcrun --sdk iphonesimulator --show-sdk-path)
$(BUILDDIR)/libhev-socks5-tunnel-iphonesimulator-x86_64.a: export PP := xcrun --sdk iphonesimulator --toolchain iphonesimulator clang
$(BUILDDIR)/libhev-socks5-tunnel-iphonesimulator-x86_64.a: export CC := xcrun --sdk iphonesimulator --toolchain iphonesimulator clang
$(BUILDDIR)/libhev-socks5-tunnel-iphonesimulator-x86_64.a: export CFLAGS := -target x86_64-apple-ios16.0-simulator -isysroot $(SDKROOT) -arch x86_64
$(BUILDDIR)/libhev-socks5-tunnel-iphonesimulator-x86_64.a: export LFLAGS := -arch x86_64 -Wl,-Bsymbolic-functions
$(BUILDDIR)/libhev-socks5-tunnel-iphonesimulator-x86_64.a:
	make static -j 8
	mkdir -p $(BUILDDIR)
	libtool -static -o $@ \
		bin/libhev-socks5-tunnel.a \
		third-part/lwip/bin/liblwip.a \
		third-part/yaml/bin/libyaml.a \
		third-part/hev-task-system/bin/libhev-task-system.a
	make clean

$(BUILDDIR)/libhev-socks5-tunnel-appletvsimulator-arm64.a: export SDKROOT := $(shell xcrun --sdk appletvsimulator --show-sdk-path)
$(BUILDDIR)/libhev-socks5-tunnel-appletvsimulator-arm64.a: export PP := xcrun --sdk appletvsimulator --toolchain appletvsimulator clang
$(BUILDDIR)/libhev-socks5-tunnel-appletvsimulator-arm64.a: export CC := xcrun --sdk appletvsimulator --toolchain appletvsimulator clang
$(BUILDDIR)/libhev-socks5-tunnel-appletvsimulator-arm64.a: export CFLAGS := -target arm64-apple-tvos17.0-simulator -isysroot $(SDKROOT) -arch arm64
$(BUILDDIR)/libhev-socks5-tunnel-appletvsimulator-arm64.a: export LFLAGS := -arch arm64 -Wl,-Bsymbolic-functions
$(BUILDDIR)/libhev-socks5-tunnel-appletvsimulator-arm64.a:
	make static -j 8
	mkdir -p $(BUILDDIR)
	libtool -static -o $@ \
		bin/libhev-socks5-tunnel.a \
		third-part/lwip/bin/liblwip.a \
		third-part/yaml/bin/libyaml.a \
		third-part/hev-task-system/bin/libhev-task-system.a
	make clean

$(BUILDDIR)/libhev-socks5-tunnel-appletvsimulator-x86_64.a: export SDKROOT := $(shell xcrun --sdk appletvsimulator --show-sdk-path)
$(BUILDDIR)/libhev-socks5-tunnel-appletvsimulator-x86_64.a: export PP := xcrun --sdk appletvsimulator --toolchain appletvsimulator clang
$(BUILDDIR)/libhev-socks5-tunnel-appletvsimulator-x86_64.a: export CC := xcrun --sdk appletvsimulator --toolchain appletvsimulator clang
$(BUILDDIR)/libhev-socks5-tunnel-appletvsimulator-x86_64.a: export CFLAGS := -target x86_64-apple-tvos17.0-simulator -isysroot $(SDKROOT) -arch x86_64
$(BUILDDIR)/libhev-socks5-tunnel-appletvsimulator-x86_64.a: export LFLAGS := -arch x86_64 -Wl,-Bsymbolic-functions
$(BUILDDIR)/libhev-socks5-tunnel-appletvsimulator-x86_64.a:
	make static -j 8
	mkdir -p $(BUILDDIR)
	libtool -static -o $@ \
		bin/libhev-socks5-tunnel.a \
		third-part/lwip/bin/liblwip.a \
		third-part/yaml/bin/libyaml.a \
		third-part/hev-task-system/bin/libhev-task-system.a
	make clean

$(BUILDDIR)/libhev-socks5-tunnel-maccatalyst-x86_64.a: export SDKROOT := $(shell xcrun --sdk macosx --show-sdk-path)
$(BUILDDIR)/libhev-socks5-tunnel-maccatalyst-x86_64.a: export PP := xcrun --sdk macosx --toolchain macosx clang
$(BUILDDIR)/libhev-socks5-tunnel-maccatalyst-x86_64.a: export CC := xcrun --sdk macosx --toolchain macosx clang
$(BUILDDIR)/libhev-socks5-tunnel-maccatalyst-x86_64.a: export CFLAGS := -target x86_64-apple-ios16.0-macabi -isysroot $(SDKROOT) -arch x86_64
$(BUILDDIR)/libhev-socks5-tunnel-maccatalyst-x86_64.a: export LFLAGS := -arch x86_64 -Wl,-Bsymbolic-functions
$(BUILDDIR)/libhev-socks5-tunnel-maccatalyst-x86_64.a:
	make static -j 8
	mkdir -p $(BUILDDIR)
	libtool -static -o $@ \
		bin/libhev-socks5-tunnel.a \
		third-part/lwip/bin/liblwip.a \
		third-part/yaml/bin/libyaml.a \
		third-part/hev-task-system/bin/libhev-task-system.a
	make clean

$(BUILDDIR)/libhev-socks5-tunnel-maccatalyst-arm64.a: export SDKROOT := $(shell xcrun --sdk macosx --show-sdk-path)
$(BUILDDIR)/libhev-socks5-tunnel-maccatalyst-arm64.a: export PP := xcrun --sdk macosx --toolchain macosx clang
$(BUILDDIR)/libhev-socks5-tunnel-maccatalyst-arm64.a: export CC := xcrun --sdk macosx --toolchain macosx clang
$(BUILDDIR)/libhev-socks5-tunnel-maccatalyst-arm64.a: export CFLAGS := -target arm64-apple-ios16.0-macabi -isysroot $(SDKROOT) -arch arm64
$(BUILDDIR)/libhev-socks5-tunnel-maccatalyst-arm64.a: export LFLAGS := -arch arm64 -Wl,-Bsymbolic-functions
$(BUILDDIR)/libhev-socks5-tunnel-maccatalyst-arm64.a:
	make static -j 8
	mkdir -p $(BUILDDIR)
	libtool -static -o $@ \
		bin/libhev-socks5-tunnel.a \
		third-part/lwip/bin/liblwip.a \
		third-part/yaml/bin/libyaml.a \
		third-part/hev-task-system/bin/libhev-task-system.a
	make clean

$(BUILDDIR)/libhev-socks5-tunnel-macosx-x86_64.a: export SDKROOT := $(shell xcrun --sdk macosx --show-sdk-path)
$(BUILDDIR)/libhev-socks5-tunnel-macosx-x86_64.a: export PP := xcrun --sdk macosx --toolchain macosx clang
$(BUILDDIR)/libhev-socks5-tunnel-macosx-x86_64.a: export CC := xcrun --sdk macosx --toolchain macosx clang
$(BUILDDIR)/libhev-socks5-tunnel-macosx-x86_64.a: export CFLAGS := -mmacosx-version-min=12.0 -isysroot $(SDKROOT) -arch x86_64
$(BUILDDIR)/libhev-socks5-tunnel-macosx-x86_64.a: export LFLAGS := -arch x86_64 -Wl,-Bsymbolic-functions
$(BUILDDIR)/libhev-socks5-tunnel-macosx-x86_64.a:
	make static -j 8
	mkdir -p $(BUILDDIR)
	libtool -static -o $@ \
		bin/libhev-socks5-tunnel.a \
		third-part/lwip/bin/liblwip.a \
		third-part/yaml/bin/libyaml.a \
		third-part/hev-task-system/bin/libhev-task-system.a
	make clean

$(BUILDDIR)/libhev-socks5-tunnel-macosx-arm64.a: export SDKROOT := $(shell xcrun --sdk macosx --show-sdk-path)
$(BUILDDIR)/libhev-socks5-tunnel-macosx-arm64.a: export PP := xcrun --sdk macosx --toolchain macosx clang
$(BUILDDIR)/libhev-socks5-tunnel-macosx-arm64.a: export CC := xcrun --sdk macosx --toolchain macosx clang
$(BUILDDIR)/libhev-socks5-tunnel-macosx-arm64.a: export CFLAGS := -mmacosx-version-min=12.0 -isysroot $(SDKROOT) -arch arm64
$(BUILDDIR)/libhev-socks5-tunnel-macosx-arm64.a: export LFLAGS := -arch arm64 -Wl,-Bsymbolic-functions
$(BUILDDIR)/libhev-socks5-tunnel-macosx-arm64.a:
	make static -j 8
	mkdir -p $(BUILDDIR)
	libtool -static -o $@ \
		bin/libhev-socks5-tunnel.a \
		third-part/lwip/bin/liblwip.a \
		third-part/yaml/bin/libyaml.a \
		third-part/hev-task-system/bin/libhev-task-system.a
	make clean

$(DESTDIR)/iPhoneOS/libhev.a: $(BUILDDIR)/libhev-socks5-tunnel-iphoneos-arm64.a
	mkdir -p $(dir $@)
	$(LIPO) -create -output $@ $^

$(DESTDIR)/AppleTVOS/libhev.a: $(BUILDDIR)/libhev-socks5-tunnel-appletvos-arm64.a
	mkdir -p $(dir $@)
	$(LIPO) -create -output $@ $^

$(DESTDIR)/iPhoneSimulator/libhev.a: $(BUILDDIR)/libhev-socks5-tunnel-iphonesimulator-x86_64.a $(BUILDDIR)/libhev-socks5-tunnel-iphonesimulator-arm64.a
	mkdir -p $(dir $@)
	$(LIPO) -create -output $@ $^

$(DESTDIR)/AppleTVSimulator/libhev.a: $(BUILDDIR)/libhev-socks5-tunnel-appletvsimulator-x86_64.a $(BUILDDIR)/libhev-socks5-tunnel-appletvsimulator-arm64.a
	mkdir -p $(dir $@)
	$(LIPO) -create -output $@ $^

$(DESTDIR)/MacCatalyst/libhev.a: $(BUILDDIR)/libhev-socks5-tunnel-maccatalyst-x86_64.a $(BUILDDIR)/libhev-socks5-tunnel-maccatalyst-arm64.a
	mkdir -p $(dir $@)
	$(LIPO) -create -output $@ $^

$(DESTDIR)/MacOSX/libhev.a: $(BUILDDIR)/libhev-socks5-tunnel-macosx-x86_64.a $(BUILDDIR)/libhev-socks5-tunnel-macosx-arm64.a
	mkdir -p $(dir $@)
	$(LIPO) -create -output $@ $^

appletvos: $(DESTDIR)/AppleTVOS/libhev.a
	rm -rf "$(PACKAGEDIR)"
	mkdir -p "$(PACKAGEDIR)/xcframeworks"
	rm -rf "$(BUILDDIR)/headers"
	mkdir -p "$(BUILDDIR)/headers"
	cp include/*.h "$(BUILDDIR)/headers/hev-main.h"
	cp ../tools/module.modulemap "$(BUILDDIR)/headers/"
	xcodebuild -create-xcframework -library $^ -headers "$(BUILDDIR)/headers" -output "$(PACKAGEDIR)/xcframeworks/HevSocks5Tunnel.xcframework"
	cp ../tools/PrivacyInfo.xcprivacy "$(PACKAGEDIR)/xcframeworks/HevSocks5Tunnel.xcframework/"
	cp "../../Templates/Package.appletv.template" "$(PACKAGEDIR)/Package.swift"
	cp -r "../../Sources" "$(PACKAGEDIR)/"
	cp "../../README.md" "$(PACKAGEDIR)/"

appletvsimulator: $(DESTDIR)/AppleTVSimulator/libhev.a
	rm -rf "$(PACKAGEDIR)"
	mkdir -p "$(PACKAGEDIR)/xcframeworks"
	rm -rf "$(BUILDDIR)/headers"
	mkdir -p "$(BUILDDIR)/headers"
	cp include/*.h "$(BUILDDIR)/headers/hev-main.h"
	cp ../tools/module.modulemap "$(BUILDDIR)/headers/"
	xcodebuild -create-xcframework -library $^ -headers "$(BUILDDIR)/headers" -output "$(PACKAGEDIR)/xcframeworks/HevSocks5Tunnel.xcframework"
	cp ../tools/PrivacyInfo.xcprivacy "$(PACKAGEDIR)/xcframeworks/HevSocks5Tunnel.xcframework/"
	cp "../../Templates/Package.appletv.template" "$(PACKAGEDIR)/Package.swift"
	cp -r "../../Sources" "$(PACKAGEDIR)/"
	cp "../../README.md" "$(PACKAGEDIR)/"

iphoneos: $(DESTDIR)/iPhoneOS/libhev.a
	rm -rf "$(PACKAGEDIR)"
	mkdir -p "$(PACKAGEDIR)/xcframeworks"
	rm -rf "$(BUILDDIR)/headers"
	mkdir -p "$(BUILDDIR)/headers"
	cp include/*.h "$(BUILDDIR)/headers/hev-main.h"
	cp ../tools/module.modulemap "$(BUILDDIR)/headers/"
	xcodebuild -create-xcframework -library $^ -headers "$(BUILDDIR)/headers" -output "$(PACKAGEDIR)/xcframeworks/HevSocks5Tunnel.xcframework"
	cp ../tools/PrivacyInfo.xcprivacy "$(PACKAGEDIR)/xcframeworks/HevSocks5Tunnel.xcframework/"
	cp "../../Templates/Package.ios.template" "$(PACKAGEDIR)/Package.swift"
	cp -r "../../Sources" "$(PACKAGEDIR)/"
	cp "../../README.md" "$(PACKAGEDIR)/"

iphonesimulator: $(DESTDIR)/iPhoneSimulator/libhev.a
	rm -rf "$(PACKAGEDIR)"
	mkdir -p "$(PACKAGEDIR)/xcframeworks"
	rm -rf "$(BUILDDIR)/headers"
	mkdir -p "$(BUILDDIR)/headers"
	cp include/*.h "$(BUILDDIR)/headers/hev-main.h"
	cp ../tools/module.modulemap "$(BUILDDIR)/headers/"
	xcodebuild -create-xcframework -library $^ -headers "$(BUILDDIR)/headers" -output "$(PACKAGEDIR)/xcframeworks/HevSocks5Tunnel.xcframework"
	cp ../tools/PrivacyInfo.xcprivacy "$(PACKAGEDIR)/xcframeworks/HevSocks5Tunnel.xcframework/"
	cp "../../Templates/Package.ios.template" "$(PACKAGEDIR)/Package.swift"
	cp -r "../../Sources" "$(PACKAGEDIR)/"
	cp "../../README.md" "$(PACKAGEDIR)/"

maccatalyst: $(DESTDIR)/MacCatalyst/libhev.a
	rm -rf "$(PACKAGEDIR)"
	mkdir -p "$(PACKAGEDIR)/xcframeworks"
	rm -rf "$(BUILDDIR)/headers"
	mkdir -p "$(BUILDDIR)/headers"
	cp include/*.h "$(BUILDDIR)/headers/hev-main.h"
	cp ../tools/module.modulemap "$(BUILDDIR)/headers/"
	xcodebuild -create-xcframework -library $^ -headers "$(BUILDDIR)/headers" -output "$(PACKAGEDIR)/xcframeworks/HevSocks5Tunnel.xcframework"
	mkdir -p "$(PACKAGEDIR)/xcframeworks/HevSocks5Tunnel.xcframework/ios-arm64_x86_64-maccatalyst/Versions/A/Resources"
	cp ../tools/PrivacyInfo.xcprivacy "$(PACKAGEDIR)/xcframeworks/HevSocks5Tunnel.xcframework/ios-arm64_x86_64-maccatalyst/Versions/A/Resources/"
	cp "../../Templates/Package.maccatalyst.template" "$(PACKAGEDIR)/Package.swift"
	cp -r "../../Sources" "$(PACKAGEDIR)/"
	cp "../../README.md" "$(PACKAGEDIR)/"

macosx: $(DESTDIR)/MacOSX/libhev.a
	rm -rf "$(PACKAGEDIR)"
	mkdir -p "$(PACKAGEDIR)/xcframeworks"
	rm -rf "$(BUILDDIR)/headers"
	mkdir -p "$(BUILDDIR)/headers"
	cp include/*.h "$(BUILDDIR)/headers/hev-main.h"
	cp ../tools/module.modulemap "$(BUILDDIR)/headers/"
	xcodebuild -create-xcframework -library $^ -headers "$(BUILDDIR)/headers" -output "$(PACKAGEDIR)/xcframeworks/HevSocks5Tunnel.xcframework"
	mkdir -p "$(PACKAGEDIR)/xcframeworks/HevSocks5Tunnel.xcframework/macos-arm64_x86_64/Versions/A/Resources"
	cp ../tools/PrivacyInfo.xcprivacy "$(PACKAGEDIR)/xcframeworks/HevSocks5Tunnel.xcframework/macos-arm64_x86_64/Versions/A/Resources/"
	cp "../../Templates/Package.macos.template" "$(PACKAGEDIR)/Package.swift"
	cp -r "../../Sources" "$(PACKAGEDIR)/"
	cp "../../README.md" "$(PACKAGEDIR)/"

default: $(PACKAGEDIR)

all: $(PACKAGEDIR)

$(PACKAGEDIR): $(DESTDIR)/iPhoneOS/libhev.a $(DESTDIR)/iPhoneSimulator/libhev.a $(DESTDIR)/AppleTVSimulator/libhev.a $(DESTDIR)/MacCatalyst/libhev.a $(DESTDIR)/MacOSX/libhev.a $(DESTDIR)/AppleTVOS/libhev.a
	rm -rf "$@"
	mkdir -p "$@/xcframeworks"
	rm -rf "$(BUILDDIR)/headers"
	mkdir -p "$(BUILDDIR)/headers"
	cp include/*.h "$(BUILDDIR)/headers/hev-main.h"
	cp ../tools/module.modulemap "$(BUILDDIR)/headers/"
	xcodebuild -create-xcframework \
		-output "$@/xcframeworks/HevSocks5Tunnel.xcframework" \
		-library "$(DESTDIR)/iPhoneOS/libhev.a" -headers "$(BUILDDIR)/headers" \
		-library "$(DESTDIR)/iPhoneSimulator/libhev.a" -headers "$(BUILDDIR)/headers" \
		-library "$(DESTDIR)/AppleTVSimulator/libhev.a" -headers "$(BUILDDIR)/headers" \
		-library "$(DESTDIR)/AppleTVOS/libhev.a" -headers "$(BUILDDIR)/headers" \
		-library "$(DESTDIR)/MacCatalyst/libhev.a" -headers "$(BUILDDIR)/headers" \
		-library "$(DESTDIR)/MacOSX/libhev.a" -headers "$(BUILDDIR)/headers"
	mkdir -p "$@/xcframeworks/HevSocks5Tunnel.xcframework/macos-arm64_x86_64/Versions/A/Resources"
	cp ../tools/PrivacyInfo.xcprivacy "$@/xcframeworks/HevSocks5Tunnel.xcframework/macos-arm64_x86_64/Versions/A/Resources/"
	mkdir -p "$@/xcframeworks/HevSocks5Tunnel.xcframework/ios-arm64_x86_64-maccatalyst/Versions/A/Resources"
	cp ../tools/PrivacyInfo.xcprivacy "$@/xcframeworks/HevSocks5Tunnel.xcframework/ios-arm64_x86_64-maccatalyst/Versions/A/Resources/"
	cp "../../Templates/Package.local.template" "$(PACKAGEDIR)/Package.swift"
	cp -r "../../Sources" "$(PACKAGEDIR)/"
	cp "../../README.md" "$(PACKAGEDIR)/"

detect_platform: MAKEFILE := $(firstword $(MAKEFILE_LIST))
detect_platform:
	@if [ "$(TARGET_DEVICE_PLATFORM_NAME)" = "iphoneos" ]; then \
		$(MAKE) -f $(MAKEFILE) iphoneos; \
	elif [ "$(TARGET_DEVICE_PLATFORM_NAME)" = "iphonesimulator" ]; then \
		$(MAKE) -f $(MAKEFILE) iphonesimulator; \
	elif [ "$(TARGET_DEVICE_PLATFORM_NAME)" = "appletvsimulator" ]; then \
		$(MAKE) -f $(MAKEFIE) iphonesimulator; \
	elif [ "$(PLATFORM_NAME)" = "macosx" ]; then \
		if [ "$(EFFECTIVE_PLATFORM_NAME)" = "-maccatalyst" ]; then \
			$(MAKE) -f $(MAKEFILE) maccatalyst; \
		else \
			$(MAKE) -f $(MAKEFILE) macosx; \
		fi; \
	fi

clean:
	rm -rf "$(BUILDDIR)" "$(DESTDIR)/HevSocks5Tunnel.xcframework"

install: build

.PHONY: clean build install all ios appletvos appletvsimulator iphoneos iphonesimulator maccatalyst macos detect_platform
